install.packages("KernSmooth")
library kernsmooth
library (KernSmooth)
library(datasets)
data(iris)
summary (iris)
lapply (iris [virginica, Sepal.Width], mean)
lapply (iris ["virginica", "Sepal.Width"], mean)
lapply (iris ["virginica", "Sepal.Width"], FUN = mean)
apply (iris ["virginica", "Sepal.Width"], 2, FUN = mean)
apply (iris [virginica, Sepal.Width], 2, FUN = mean)
apply (iris [virginica [Sepal.Width]], 2, FUN = mean)
lapply (iris ["virginica", "Sepal.Width"], mean)
iris$Sepal.Length[iris$Species=="virginica"]
test<-iris$Sepal.Length[iris$Species=="virginica"]
mean (test)
head (iris)
apply(iris[Species==virginica, 1], 2, mean)
apply(iris[, 1[Species=="virginica"]], 2, mean)
apply(iris[, 1[iris$Species=="virginica"]], 2, mean)
apply(iris[(iris$Species=="virginica"), 1], 2, mean)
library(datasets)
data(mtcars)
apply(mtcars, 2, mean)
apply (iris, 2, mean)
library (iris)
library(datasets)
data(iris)
apply (iris, 2, mean)
apply (iris [ ,1:4], 2, mean)
apply (iris [Species==virginica, 1:4], 2, mean)
apply (iris [iris$Species==virginica, 1:4], 2, mean)
apply (iris [, 1:4 [iris$Species==virginica]], 2, mean)
apply (iris [, 1:4 [Species==virginica]], 2, mean)
apply (iris [, [Species==virginica], 2, mean)
apply (iris [, (Species==virginica), 2, mean)
apply (iris [ ,[Species==virginica]], 2, mean)
library (swirl)
swirl()
x
x [1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y [y>0]
x [x>0]
x[!is.na(x) & x>0]
x [xc(3,5,7)]
x [c(x[3], x[5], x[7])]
x[c(x[3], x[5], x[7])]
x (c(3,5,7))
x[c(3,5,7)]
x[0]
x [3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names (vect)
vect2 with c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim (my_vector)
length (my_vector)
dim(my_vector) <- c(4, 5)
dim (my_vector)
attributes (my_vector)
my_vector
class()
class (my_vector)
my_matrix<-my_vector
?matrix
matrix (1:20, 4, 5)
my_matrix2<-matrix (1:20, 4, 5)
identical (my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class (my_data)
cnames <- (c("patient", "age", "weight", "bp", "rating", "test"))
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames (my_data, cnames)
colnames (mydata) <- cnames
colnames (my_data) <- cnames
my_data
http://s3.amazonaws.com/practice_assignment/diet_data.zip
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
length (andy$Day)
andy <- read.csv("diet_data/Andy.csv")
head(andy)
andy [1, "Weight"]
andy [andy$Weight, 1]
andy [andy$Weight [1]]
andy [andy$Weight [1],]
andy [1, andy$Weight]
andy [30, "Weight"]
data (iris)
subset <- iris[which (iris$Species == "virginica"), "Sepal.Length"]
head (subset)
apply (iris[which (iris$Species == "virginica"), "Sepal.Length"], 2, mean)
apply (subset, 2, mean)
dim (subset)
mean (subset)
apply (iris, 2, mean)
apply (iris["Species"=="virginica"),1:4])
apply (iris[("Species"=="virginica"),1:4])
apply (iris[("Species"=="virginica"),1:4], mean)
apply (iris[("Species"=="virginica"),1:4], 2, mean)
iris$species
iris$Species
y<- iris[iris$species == "virginica"]
y
y<- iris[iris$species == "virginica", ]
y
y<- iris[, iris$species == "virginica"]
y
y<- iris[iris$Species == "virginica"]
y<- iris[iris$Species == "virginica",]
y
apply (iris[iris$Species == "virginica",], 2, mean)
apply (iris[iris$Species == "virginica"], 2, mean)
apply (iris[iris$Species == "virginica", ], 2, mean)
apply (iris[iris$Species == "virginica",], 2, mean)
apply (iris, 2, mean)
apply (iris[1:4], 2, mean)
apply (iris[iris$Species == "virginica", 1:4], 2, mean)
library(datasets)
data(mtcars)
summary (mtcars)
head (mtcars)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply (mtcars$hp, mean)
answer <- tapply (mtcars$hp, mtcars$cyl, mean)
difference <-answer[1] - answer[2]
difference
difference <- abs(answer[1] - answer[2])
difference
debug(ls)
ls
ls ()
*
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
answer <-sapply(split(mtcars$hp, mtcars$cyl), mean)
answer
class (answer)
difference <- abs(answer[1] - answer[8])
difference
difference <- abs(answer[1] - answer[3])
difference
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with (mtcars, tapply(hp, cyl, mean))
answer <- with (mtcars, tapply(hp, cyl, mean))
answer
difference <- abs(answer[1] - answer [3])
difference
x<- c(rnorm(10), runif (10), rnorm (10,1))
f <- gl(3, 10)
tapply (x, f, range)
library (datasets)
data (iris)
head (iris)
tapply (Petal.Length, Species, mean)
tapply (Petal.Length, Species, mean)
with (iris, tapply(Petal.Length, Species, mean)
)
with (iris, tapply (Sepal.Length, Species, mean))
within (iris, tapply(Sepal.Length, Species, mean))
apply (iris[iris$Species=="virginica", 1:4], 2, mean)
apply (iris[iris$Species, 1:4], 2, mean)
colMeans(iris$Sepal.Length)
colMeans (iris[iris$Sepal.Length])
colMeans (iris[, iris$Sepal.Length])
colMeans (iris[1])
apply (iris[1:4], 2, mean)
apply (iris[, iris$Sepal.Length], 2, mean)
apply (iris[iris$Sepal.Length], 2, mean)
apply (iris[which(,iris$Sepal.Length)], 2, mean)
library (plyr)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot (y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
summaryRprof(lm)
summaryRprof(lm)
summaryRprof(){lm}
summaryRprof(lm)
summaryRprof()
lm()
library(datasets)
Rprof()
summaryRprof(fit <- lm(y ~ x1 + x2))
summaryRprof(fit <- lm())
summaryRprof(lm())
summaryRprof(lm
)
summaryRprof(lm)
swirl()
library (swirl)
swirl()
play()
head (flags)
nxt()
sapply (flags, unique)
vapply(flags, unique, numeric(1))
ok
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class (plants)
dim (plants)
nrow(plantws)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head (plants)
head (plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str (plants)
?sample
sample(1:6, 4, replace =TRUE)
sample(1:6, 4, replace =TRUE)
sample(1:20, replace =FALSE)
sample(1:20, 10)
letters
LETTERS
sample (LETTERS)
flips<-sample(c(0,1), 100, replacement=TRUE, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace =TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(10, mean=10)
rpois(5)
rpois(5, lambda=10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-sys.time()
t1<-Sys.time()
t1
class (t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
t1-Sys.time()
Sys.time() - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(jsonlite)
jsondata<-FromJSON(https://api.github.com/users/jtleek/repos)
jsondata<-fromJSON("https://api.github.com/users/jtleek/repos")
head(jsondata)
names(jsondata)
jsondata[45]
View(jsondata)
View(jsondata)
jsondata[1, ]
jsondata[1, "full name"]
jsondata[1, "full_name"]
jsondata[1:5, "full_name"]
find(jsondata, "clean", mode = "any", numeric = FALSE, simple.words = TRUE)
find(jsondata, what="clean", mode = "any", numeric = FALSE, simple.words = TRUE)
names(jsondata$owner)
names(jasondata[ ,"owner"])
names(jsondata[ ,"owner"])
names(jsondata[[ ,"type"])]
names(jsondata[[ ,"type"]]
)
names(jsondata[,["type"]])
jsondata$owner$type
jsondata$owner$login
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character",                                                         "factor", "numeric", "numeric"))head(pollution)
packages <- c("data.table", "downloader", "xlsx", "XML", "RCurl", "stringr" , "reshape2", "plyr",
"dplyr", "Hmisc", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
##ensures that the necessary packages are loaded
path <- file.path(getwd(), "project1")
if (!file.exists(path)) {dir.create(path)}
setwd(path)
##sets/creates the working directory
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
f <- "household_power_consumption.zip"
download(url, destfile = f, quiet=TRUE)
dateDownloaded <- date()
print(dateDownloaded)
##downloads the file and records the data it was downloaded
zipfile<-file.path(getwd(), f)
file_names <- unzip(zipfile, list=TRUE)$Name
unzip(zipfile, exdir=path)
message("Data file successfully downloaded and unzipped. Your data is stored here:")
print(path)
print(file_names)
data <- subset(read.csv(file_names[1],
header=TRUE,
sep=";",
quote="\"",
na.strings="?",
colClasses=c(rep("character",2), rep("numeric",7))),
Date=="1/2/2007" | Date=="2/2/2007")
data$DateTime<-strptime(paste(data$Date,data$Time),"%d/%m/%Y %H:%M:%S")
hist(data$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
## create plot
png(filename="plot4.png", width=480, height=480)
## Copy my plot to a PNG file
setwd("~/Documents/Coursera/ExploratoryAnalysis/project1")
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot4.R')
plot1()
setwd("~/Documents/Coursera/ExploratoryAnalysis")
source('~/.active-rstudio-document')
plot4()
source('~/.active-rstudio-document')
plot1<- function(){
packages <- c("data.table", "downloader", "xlsx", "XML", "RCurl", "stringr" , "reshape2", "plyr",
"dplyr", "Hmisc", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
##ensures that the necessary packages are loaded
path <- file.path(getwd(), "project1")
if (!file.exists(path)) {dir.create(path)}
setwd(path)
##sets/creates the working directory
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
f <- "household_power_consumption.zip"
download(url, destfile = f, quiet=TRUE)
dateDownloaded <- date()
print(dateDownloaded)
##downloads the file and records the data it was downloaded
zipfile<-file.path(getwd(), f)
file_names <- unzip(zipfile, list=TRUE)$Name
unzip(zipfile, exdir=path)
message("Data file successfully downloaded and unzipped. Your data is stored here:")
print(path)
print(file_names)
data <- subset(read.csv(file_names[1],
header=TRUE,
sep=";",
quote="\"",
na.strings="?",
colClasses=c(rep("character",2), rep("numeric",7))),
Date=="1/2/2007" | Date=="2/2/2007")
data$DateTime<-strptime(paste(data$Date,data$Time),"%d/%m/%Y %H:%M:%S")
hist(data$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
## create plot
png(filename="plot1.png", width=480, height=480)
## Copy my plot to a PNG file
}
plot1()
setwd("~/Documents/Coursera/ExploratoryAnalysis")
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
plot1()
setwd("~/Documents/Coursera/ExploratoryAnalysis")
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
plot1()
setwd("~/Documents/Coursera/ExploratoryAnalysis")
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
setwd("~/Documents/Coursera/ExploratoryAnalysis")
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
plot1()
source('~/Documents/Coursera/ExploratoryAnalysis/project1/plot1.R')
setwd("~/Documents/Coursera/ExploratoryAnalysis")
plot1()
setwd("~/Documents/Coursera/ExploratoryAnalysis")
packages <- c("data.table", "downloader", "xlsx", "XML", "RCurl", "stringr" , "reshape2", "plyr",
"dplyr", "Hmisc", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
##ensures that the necessary packages are loaded
path <- file.path(getwd(), "project1")
if (!file.exists(path)) {dir.create(path)}
setwd(path)
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
f <- "household_power_consumption.zip"
download(url, destfile = f, quiet=TRUE)
dateDownloaded <- date()
print(dateDownloaded)
print(paste(path, file_names)
)
data <- subset(read.csv(file_names[1],
header=TRUE,
sep=";",
quote="\"",
na.strings="?",
colClasses=c(rep("character",2), rep("numeric",7))),
Date=="1/2/2007" | Date=="2/2/2007")
data$DateTime<-strptime(paste(data$Date,data$Time),"%d/%m/%Y %H:%M:%S")
hist(data$Global_active_power, col = "red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
